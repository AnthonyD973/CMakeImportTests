# SPDX-License-Identifier: MIT
name: CMake

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  PRJ1_CONFIG: Release
  PRJ2_CONFIG: Release
  VERBOSE: ON

jobs:

###############################################################################
# 'ninja-nix' job
###############################################################################
  ninja-nix:
    strategy:
      matrix:
        # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#choosing-github-hosted-runners
        runner-id: [ubuntu-latest, macos-latest]
        prj1-configure-preset: [static, shared]
        prj2-configure-preset: [static, shared]
        has-analysis: [false]

        # Remove the configuration "ubuntu-latest, static, static", and replace
        # that with the configuration "ubuntu-latest, static-dev, static-dev".
        # This means that the static analysis and format-checking tools won't
        # be run on every build, since only the *-dev CMake workflows
        # call them. This has the effect of 1) making the CI run a little
        # faster, 2) makes failures in the static checkers not be shown on
        # every job that has had time to build up to that point before being
        # stopped, 3) allows us to not kill the whole CI workflow if only
        # the static checkers failed (so that whoever committed the code can
        # still see whether the other jobs pass build, test and install
        # regardless of static checkers), and 4) means we don't *have* to setup
        # the analysis tools for all CI runners.

        # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstrategymatrixexclude
        exclude:
          - runner-id: ubuntu-latest
            prj1-configure-preset: static
            prj2-configure-preset: static
            has-analysis: false

          # Don't do (shared, static) CI jobs --if the others work then there's
          # a good chance that one will too.
          - prj1-configure-preset: shared
            prj2-configure-preset: static

        # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstrategymatrixinclude
        include:
          - runner-id: ubuntu-latest
            prj1-configure-preset: static-dev
            prj2-configure-preset: static-dev
            has-analysis: true

          # Use different CPack generators depending on the runner.
          - runner-id: ubuntu-latest
            cpack-generators: "DEB;RPM;External;STGZ;TGZ;ZIP"
          - runner-id: macos-latest
            cpack-generators: "DragNDrop;productbuild;External;STGZ;TGZ;ZIP"

    env:
      # Environment variables used by CMake.
      # See: https://cmake.org/cmake/help/latest/manual/cmake-env-variables.7.html
      CMAKE_GENERATOR: Ninja
      PRJ1_CONFIGURE_PRESET: ${{matrix.prj1-configure-preset}}
      PRJ2_CONFIGURE_PRESET: ${{matrix.prj2-configure-preset}}
      CPACK_GENERATORS: ${{matrix.cpack-generators}}

    runs-on: ${{matrix.runner-id}}
    continue-on-error: ${{matrix.has-analysis}}

    steps:
    - name: Ubuntu install ninja
      working-directory: ${{github.workspace}}
      if: matrix.runner-id == 'ubuntu-latest'
      run: |
        wget https://github.com/ninja-build/ninja/releases/download/v1.11.1/ninja-linux.zip && \
        unzip ninja-linux.zip && rm ninja-linux.zip && \
        echo "${{github.workspace}}" >> $GITHUB_PATH

    - name: MacOS install ninja
      if: matrix.runner-id == 'macos-latest'
      working-directory: ${{github.workspace}}
      run: |
        wget https://github.com/ninja-build/ninja/releases/download/v1.11.1/ninja-mac.zip && \
        unzip ninja-mac.zip && rm ninja-mac.zip && \
        echo "${{github.workspace}}" >> $GITHUB_PATH

    - name: MacOS packages setup
      if: matrix.runner-id == 'macos-latest'
      working-directory: ${{github.workspace}}
      run: |
        # Needed by vcpkg install
        brew install pkg-config

    - name: MacOS clang-tidy && clang-format setup
      if: matrix.runner-id == 'macos-latest' && matrix.has-analysis == 'true'
      working-directory: ${{github.workspace}}
      # https://stackoverflow.com/a/53380855/2252948
      run: |
        brew install llvm &&                                  \
        echo "LLVM Brew prefix: $(brew --prefix llvm)" &&     \
        echo "ls -l $(brew --prefix llvm):" &&                \
        ls -l "$(brew --prefix llvm)" &&                      \
        echo "ls -l $(brew --prefix llvm)/bin:" &&            \
        ls -l "$(brew --prefix llvm)/bin" &&                  \
        echo "Adding $(brew --prefix llvm)/bin to PATH" &&    \
        echo "$(brew --prefix llvm)/bin" >> $GITHUB_PATH

    - uses: actions/checkout@v3
      with:
        # The actions/checkout@v3 action clones into
        # "${{github.workspace}}" by default, which wipes the ninja executable we just extracted.
        path: repo
        # Also clone submodules, recursively (like
        # 'git submodule update --init --recursive')
        submodules: recursive

    - name: Build and run
      working-directory: ${{github.workspace}}/repo
      run: |
        ./build-and-run.sh

###############################################################################
# 'ninja-win' job
###############################################################################

  ninja-win:
    strategy:
      matrix:
        # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#choosing-github-hosted-runners
        runner-id: [windows-latest]
        prj1-configure-preset: [static, shared]
        prj2-configure-preset: [static, shared]
        # Specify Visual Studio release year. Multiple such list items can
        # be added to try multiple VS versions. Not sure if different VS
        # versions necessarily have a different version of MSVC or if they
        # would all just use the same MSVC.
        vs-version: [2022]
        has-analysis: [false]

        # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstrategymatrixexclude
        exclude:
          # Don't do (shared, static) CI jobs --if the others work then there's
          # a good chance that one will too.
          - prj1-configure-preset: shared
            prj2-configure-preset: static

    env:
      # Environment variables used by CMake.
      # See: https://cmake.org/cmake/help/latest/manual/cmake-env-variables.7.html
      CMAKE_GENERATOR: Ninja
      PRJ1_CONFIGURE_PRESET: ${{matrix.prj1-configure-preset}}
      PRJ2_CONFIGURE_PRESET: ${{matrix.prj2-configure-preset}}
      CPACK_GENERATORS: NSIS64;WIX;External;STGZ;TGZ;ZIP

    runs-on: ${{matrix.runner-id}}
    continue-on-error: ${{matrix.has-analysis}}

    steps:
    - name: Set environment
      run: |
        echo "VS_VCVARSALL=$env:ProgramFiles\Microsoft Visual Studio\${{matrix.vs-version}}\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" | `
            Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    - name: Install ninja
      working-directory: ${{github.workspace}}
      run: |
        (new-object System.Net.WebClient).DownloadFile('https://github.com/ninja-build/ninja/releases/download/v1.11.1/ninja-win.zip','${{github.workspace}}\ninja-win.zip');
        tar -xf ninja-win.zip;
        echo "${{github.workspace}}" >> $GITHUB_PATH

    - name: Packages setup
      working-directory: ${{github.workspace}}
      # We'll need to explicitly specify MSVC as the compiler to use on
      # Windows, since CI setups obviously need to be reproductible and
      # consistent. For example, before we did that here, CMake was choosing
      # MinGW GCC as the compiler, which has a different name mangling scheme
      # as MSVC. This caused linking errors when trying to link GTest (which
      # is installed via vcpkg using the x64-windows triplet, which builds
      # using MSVC) with the libraries built here with MinGW GCC.
      #
      # Setting MSVC as the compiler in non-"Visual Studio*" generators is
      # non-trivial; it should be done by calling a specific script called
      # 'vcvarsall.bat' deep inside the Visual Studio installation.
      #
      # However, that is a CMD batch file script, while the GitHub CI uses
      # PowerShell, not CMD. So we have to use Invoke-BatchFile, which is an
      # extension provided by the pscx community package:
      # https://cmake.org/pipermail/cmake/2019-May/069461.html
      #
      # For pscx installation:
      # https://stackoverflow.com/a/31845504/2252948
      #
      # Note that running 'Import-Module pscx' may require setting the
      # PowerShell 'executionpolicy' (whatever that is):
      # https://stackoverflow.com/a/18533754/2252948
      run: |
        Find-Package pscx -ProviderName PowerShellGet |                       `
            Install-Package -Force -AllowClobber &&                           `
        powershell Set-ExecutionPolicy RemoteSigned &&                        `
        Import-Module pscx

    - uses: actions/checkout@v3
      with:
        # The actions/checkout@v3 action clones into
        # "${{github.workspace}}" by default, which wipes the ninja executable we just extracted.
        path: repo
        # Also clone submodules, recursively (like
        # 'git submodule update --init --recursive')
        submodules: recursive

    - name: Setup Vcpkg
      working-directory: ${{github.workspace}}/repo
      run: |
        cmd /c vcpkg\bootstrap-vcpkg.bat

    - name: AdeClangFormat/Workflow
      working-directory: ${{github.workspace}}/repo/AdeClangFormat
      run: |
        $env:CMAKE_BUILD_TYPE="Release" &&                                           `
        cmake -S . -B build --install-prefix "${{github.workspace}}/repo/install" && `
        cmake --build build --config Release -j10 &&                                 `
        ctest --test-dir build --build-config Release -j10

    - name: AdeClangFormat/CPack
      working-directory: ${{github.workspace}}/repo/AdeClangFormat
      run: |
        cpack -B build -G $env:CPACK_GENERATORS --config build/CPackConfig.cmake

    - name: AdeClangFormat/Install
      working-directory: ${{github.workspace}}/repo/AdeClangFormat
      run: |
        cmake --install build --config Release

    - name: prj1/Workflow
      working-directory: ${{github.workspace}}/repo/prj1
      run: |
        Invoke-BatchFile $env:VS_VCVARSALL x64 &&                             `
        [Environment]::SetEnvironmentVariable("CMAKE_BUILD_TYPE", $env:PRJ1_CONFIG) && `
        cmake --preset $env:PRJ1_CONFIGURE_PRESET &&                          `
        cmake --build build --config $env:PRJ1_CONFIG -j10 &&                 `
        ctest --test-dir build --build-config $env:PRJ1_CONFIG -j10

    - name: prj1/CPack
      working-directory: ${{github.workspace}}/repo/prj1
      run: |
        cpack -B build -G $env:CPACK_GENERATORS --config build/CPackConfig.cmake

    - name: prj1/Install
      working-directory: ${{github.workspace}}/repo/prj1
      run: |
        cmake --install build --config $env:PRJ1_CONFIG

    - name: prj2/Workflow
      working-directory: ${{github.workspace}}/repo/prj2
      run: |
        Invoke-BatchFile $env:VS_VCVARSALL x64 &&                             `
        [Environment]::SetEnvironmentVariable("CMAKE_BUILD_TYPE", $env:PRJ2_CONFIG) && `
        cmake --preset $env:PRJ2_CONFIGURE_PRESET &&                          `
        cmake --build build --config $env:PRJ2_CONFIG -j10 &&                 `
        ctest --test-dir build --build-config $env:PRJ2_CONFIG -j10

    - name: prj2/CPack
      working-directory: ${{github.workspace}}/repo/prj2
      run: |
        cpack -B build -G $env:CPACK_GENERATORS --config build/CPackConfig.cmake

    - name: prj2/Install
      working-directory: ${{github.workspace}}/repo/prj2
      run: |
        cmake --install build --config $env:PRJ2_CONFIG

    - name: Run exe
      run: |
        ${{github.workspace}}/repo/install/bin/exe

###############################################################################
# 'vs' job
###############################################################################
  vs:
    strategy:
      matrix:
        generator: ["Visual Studio 17 2022"]
        prj1-configure-preset: [static, shared]
        prj2-configure-preset: [static, shared]

        # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstrategymatrixexclude
        exclude:
          # Don't do (shared, static) CI jobs --if the others work then there's
          # a good chance that one will too.
          - prj1-configure-preset: shared
            prj2-configure-preset: static

    runs-on: windows-latest

    env:
      # Environment variables used by CMake.
      # See: https://cmake.org/cmake/help/latest/manual/cmake-env-variables.7.html
      CMAKE_GENERATOR: ${{matrix.generator}}
      PRJ1_CONFIGURE_PRESET: ${{matrix.prj1-configure-preset}}
      PRJ2_CONFIGURE_PRESET: ${{matrix.prj2-configure-preset}}
      CPACK_GENERATORS: NSIS64;WIX;External;STGZ;TGZ;ZIP

    steps:
    - uses: actions/checkout@v3
      with:
        # To remain consistent with the 'ninja' jobs.
        path: repo
        # Also clone submodules, recursively (like
        # 'git submodule update --init --recursive')
        submodules: recursive

    - name: Setup Vcpkg
      working-directory: ${{github.workspace}}/repo
      run: |
        cmd /c vcpkg\bootstrap-vcpkg.bat

    - name: AdeClangFormat/Workflow
      working-directory: ${{github.workspace}}/repo/AdeClangFormat
      run: |
        $env:CMAKE_BUILD_TYPE="Release" &&                                           `
        cmake -S . -B build --install-prefix "${{github.workspace}}/repo/install" && `
        cmake --build build --config Release -j10 &&                                 `
        ctest --test-dir build --build-config Release -j10

    - name: AdeClangFormat/CPack
      working-directory: ${{github.workspace}}/repo/AdeClangFormat
      run: |
        cpack -B build -G $env:CPACK_GENERATORS --config build/CPackConfig.cmake

    - name: AdeClangFormat/Install
      working-directory: ${{github.workspace}}/repo/AdeClangFormat
      run: |
        cmake --install build --config Release

    - name: prj1/Workflow
      working-directory: ${{github.workspace}}/repo/prj1
      run: |
        [Environment]::SetEnvironmentVariable("CMAKE_BUILD_TYPE", $env:PRJ1_CONFIG) && `
        cmake --preset $env:PRJ1_CONFIGURE_PRESET &&                          `
        cmake --build build --config $env:PRJ1_CONFIG -j10 &&                 `
        ctest --test-dir build --build-config $env:PRJ1_CONFIG -j10

    - name: prj1/CPack
      working-directory: ${{github.workspace}}/repo/prj1
      run: |
        cpack -B build -G $env:CPACK_GENERATORS --config build/CPackConfig.cmake

    - name: prj1/Install
      working-directory: ${{github.workspace}}/repo/prj1
      run: cmake --install build --config $env:PRJ1_CONFIG

    - name: prj2/Workflow
      working-directory: ${{github.workspace}}/repo/prj2
      run: |
        [Environment]::SetEnvironmentVariable("CMAKE_BUILD_TYPE", $env:PRJ2_CONFIG) && `
        cmake --preset $env:PRJ2_CONFIGURE_PRESET &&                          `
        cmake --build build --config $env:PRJ2_CONFIG -j10 &&                 `
        ctest --test-dir build --build-config $env:PRJ2_CONFIG -j10

    - name: prj2/CPack
      working-directory: ${{github.workspace}}/repo/prj2
      run: |
        cpack -B build -G $env:CPACK_GENERATORS --config build/CPackConfig.cmake

    - name: prj2/Install
      working-directory: ${{github.workspace}}/repo/prj2
      run: |
        cmake --install build --config $env:PRJ2_CONFIG

    - name: Run exe
      run: |
        ${{github.workspace}}/repo/install/bin/exe

